@page "/"

@if (Popups.ShowGetErrorPopup)
{
    <div class="modal" data-bs-theme="@(Misc.darkmode ? "dark" : "")" tabindex="-1" role="dialog" style="display:block;background-color:rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Connection Error</h5>
                    <button type="button" class="btn btn-close" @onclick="Popups.CloseGetErrorPopup">
                        <span aria-hidden="true"></span>
                    </button>
                </div>
                <div class="modal-body">
                    @ApiGets.ResponseError
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Popups.CloseGetErrorPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}
@if (Popups.ShowSetErrorPopup)
{
    <div class="modal" data-bs-theme="@(Misc.darkmode ? "dark" : "")" tabindex="-1" role="dialog" style="display:block;background-color:rgba(0,0,0,0.5)">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Connection Error</h5>
                    <button type="button" class="btn btn-close" @onclick="Popups.CloseSetErrorPopup">
                        <span aria-hidden="true"></span>
                    </button>
                </div>
                <div class="modal-body">
                    @ApiSets.ResponseError
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Popups.CloseSetErrorPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}
@if (Popups.ShowConfirmPopup)
{
    <div class="modal" data-bs-theme="@(Misc.darkmode ? "dark" : "")" tabindex="-1" role="dialog" style="display:block;background-color:rgba(0,0,0,0.5)">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Popups.ConfirmPopupTitle</h5>
                    <button type="button" class="btn btn-close" @onclick="Popups.CloseConfirmPopup">
                        <span aria-hidden="true"></span>
                    </button>
                </div>
                <div class="modal-body">
                    @Popups.ConfirmPopupContent
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="Popups.CloseConfirmPopup">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<center><h1>@Preferences.Default.Get("main_page_heading", "BeerTrackingSystem")</h1></center>
@if (@Preferences.Default.Get("show_motd", "true") == "true" )
{
    <center><h2>MotD: @Preferences.Default.Get("motd", "No Quote for today.")</h2></center>
}
<br />
@{
    List<Dictionary<string, object>> data = new List<Dictionary<string, object>>();
    if (Preferences.Default.ContainsKey("current_strikes"))
    {
        var jsonData = Preferences.Default.Get("current_strikes", "Unknown Strikes");
        var deserializedData = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(jsonData);

        if (deserializedData != null)
        {
            data = deserializedData;
        }
    }
}

<table class="table table-bordered table-hover @(Misc.darkmode ? "table-dark" : "")">
    <thead>
        <tr class="text-center">
            <th>Name</th>
            <th>Strikes</th>
            <th>Last Pay</th>
        </tr>
    </thead>
    <tbody>
        @if (data != null)
        {
            @foreach (var item in data)
            {
                <tr class="text-center">
                    <td>@item["name"]</td>
                    <td>@item["currentstrikes"]</td>
                    <td>@item["last_pay"]</td>
                </tr>
            }
        }
    </tbody>
</table>
<br />
<center>
<table class="table-responsive">
    <tr class="text-center">
        <td>
            <a href="/strikes-add" class="btn btn-primary">Add Strike</a>
        </td>
        <td></td>
        <td>
            <a href="/strikes-del" class="btn btn-primary">Delete Strike</a>
        </td>
    </tr>
</table>
</center>

<footer class="text-muted" style="@(Misc.darkmode ? "color: #888 !important;" : "")">
    <p class="small">Last Update: @Preferences.Default.Get("last_update", "Not updated yet")</p>
</footer>

@code {
    protected override async Task OnInitializedAsync()
    {
        Misc.GetDarkMode();
        await Task.Delay(1);
        await ApiGets.GetMisc();
        await ApiGets.GetCurrentStrikes();
        await ApiGets.GetMotd();
    }
}